{
    "numFailedTestSuites": 1,
    "numFailedTests": 2,
    "numPassedTestSuites": 0,
    "numPassedTests": 4,
    "numPendingTestSuites": 0,
    "numPendingTests": 0,
    "numRuntimeErrorTestSuites": 0,
    "numTodoTests": 0,
    "numTotalTestSuites": 1,
    "numTotalTests": 6,
    "openHandles": [],
    "snapshot": {
        "added": 0,
        "didUpdate": false,
        "failure": false,
        "filesAdded": 0,
        "filesRemoved": 0,
        "filesRemovedList": [],
        "filesUnmatched": 0,
        "filesUpdated": 0,
        "matched": 0,
        "total": 0,
        "unchecked": 0,
        "uncheckedKeysByFile": [],
        "unmatched": 0,
        "updated": 0
    },
    "startTime": 1584889076453,
    "success": false,
    "testResults": [
        {
            "assertionResults": [
                {
                    "ancestorTitles": [
                        "type test"
                    ],
                    "failureMessages": [],
                    "fullName": "type test chromium(headless): should type out all inputs",
                    "location": null,
                    "status": "passed",
                    "title": "chromium(headless): should type out all inputs"
                },
                {
                    "ancestorTitles": [
                        "type test"
                    ],
                    "failureMessages": [],
                    "fullName": "type test firefox(headless): should type out all inputs",
                    "location": null,
                    "status": "passed",
                    "title": "firefox(headless): should type out all inputs"
                },
                {
                    "ancestorTitles": [
                        "type test"
                    ],
                    "failureMessages": [],
                    "fullName": "type test webkit(headless): should type out all inputs",
                    "location": null,
                    "status": "passed",
                    "title": "webkit(headless): should type out all inputs"
                },
                {
                    "ancestorTitles": [
                        "type test"
                    ],
                    "failureMessages": [],
                    "fullName": "type test chromium(non-headless): should type out all inputs",
                    "location": null,
                    "status": "passed",
                    "title": "chromium(non-headless): should type out all inputs"
                },
                {
                    "ancestorTitles": [
                        "type test"
                    ],
                    "failureMessages": [
                        "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"asdfasdf@jkljkl.com\"\u001b[39m\nReceived: \u001b[31m\"\"\u001b[39m\n    at forEach (/Users/aes/sandbox/playwright-screenshot/src/playwright.spec.js:55:29)\n    at Array.forEach (<anonymous>)\n    at Object.<anonymous> (/Users/aes/sandbox/playwright-screenshot/src/playwright.spec.js:54:18)"
                    ],
                    "fullName": "type test firefox(non-headless): should type out all inputs",
                    "location": null,
                    "status": "failed",
                    "title": "firefox(non-headless): should type out all inputs"
                },
                {
                    "ancestorTitles": [
                        "type test"
                    ],
                    "failureMessages": [
                        "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"asdfasdf@jkljkl.com\"\u001b[39m\nReceived: \u001b[31m\"\"\u001b[39m\n    at forEach (/Users/aes/sandbox/playwright-screenshot/src/playwright.spec.js:55:29)\n    at Array.forEach (<anonymous>)\n    at Object.<anonymous> (/Users/aes/sandbox/playwright-screenshot/src/playwright.spec.js:54:18)"
                    ],
                    "fullName": "type test webkit(non-headless): should type out all inputs",
                    "location": null,
                    "status": "failed",
                    "title": "webkit(non-headless): should type out all inputs"
                }
            ],
            "endTime": 1584889141199,
            "message": "\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mtype test › firefox(non-headless): should type out all inputs\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"asdfasdf@jkljkl.com\"\u001b[39m\n    Received: \u001b[31m\"\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 53 | \u001b[39m        \u001b[36mconst\u001b[39m textVals \u001b[33m=\u001b[39m await page\u001b[33m.\u001b[39m$$eval(\u001b[32m\"input[type=text]\"\u001b[39m\u001b[33m,\u001b[39m (inputs) \u001b[33m=>\u001b[39m inputs\u001b[33m.\u001b[39mmap((input) \u001b[33m=>\u001b[39m input\u001b[33m.\u001b[39mvalue))\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 54 | \u001b[39m        textVals\u001b[33m.\u001b[39mforEach((textVal) \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 55 | \u001b[39m            expect(textVal)\u001b[33m.\u001b[39mtoBe(\u001b[33mSOME_TEXT\u001b[39m)\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m    | \u001b[39m                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 56 | \u001b[39m        })\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 57 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 58 | \u001b[39m        \u001b[36mconst\u001b[39m emailVal \u001b[33m=\u001b[39m await page\u001b[33m.\u001b[39m$eval(\u001b[32m\"input[type=email]\"\u001b[39m\u001b[33m,\u001b[39m (input) \u001b[33m=>\u001b[39m input\u001b[33m.\u001b[39mvalue)\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat forEach (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/playwright.spec.js\u001b[39m\u001b[0m\u001b[2m:55:29)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m          at Array.forEach (<anonymous>)\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/playwright.spec.js\u001b[39m\u001b[0m\u001b[2m:54:18)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mtype test › webkit(non-headless): should type out all inputs\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"asdfasdf@jkljkl.com\"\u001b[39m\n    Received: \u001b[31m\"\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 53 | \u001b[39m        \u001b[36mconst\u001b[39m textVals \u001b[33m=\u001b[39m await page\u001b[33m.\u001b[39m$$eval(\u001b[32m\"input[type=text]\"\u001b[39m\u001b[33m,\u001b[39m (inputs) \u001b[33m=>\u001b[39m inputs\u001b[33m.\u001b[39mmap((input) \u001b[33m=>\u001b[39m input\u001b[33m.\u001b[39mvalue))\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 54 | \u001b[39m        textVals\u001b[33m.\u001b[39mforEach((textVal) \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 55 | \u001b[39m            expect(textVal)\u001b[33m.\u001b[39mtoBe(\u001b[33mSOME_TEXT\u001b[39m)\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m    | \u001b[39m                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 56 | \u001b[39m        })\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 57 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 58 | \u001b[39m        \u001b[36mconst\u001b[39m emailVal \u001b[33m=\u001b[39m await page\u001b[33m.\u001b[39m$eval(\u001b[32m\"input[type=email]\"\u001b[39m\u001b[33m,\u001b[39m (input) \u001b[33m=>\u001b[39m input\u001b[33m.\u001b[39mvalue)\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat forEach (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/playwright.spec.js\u001b[39m\u001b[0m\u001b[2m:55:29)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m          at Array.forEach (<anonymous>)\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36msrc/playwright.spec.js\u001b[39m\u001b[0m\u001b[2m:54:18)\u001b[22m\u001b[2m\u001b[22m\n",
            "name": "/Users/aes/sandbox/playwright-screenshot/src/playwright.spec.js",
            "startTime": 1584889077674,
            "status": "failed",
            "summary": ""
        }
    ],
    "wasInterrupted": false
}